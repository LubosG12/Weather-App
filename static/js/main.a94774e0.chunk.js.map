{"version":3,"sources":["components/WeatherInfo.js","components/WeatherContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","props","data","temp","humidity","description","city","className","WeatherContainer","API_KEY","useState","searchQuery","setSearchQuery","weatherData","setWeatherData","isValidZipCode","setIsValidZipCode","placeholder","onChange","event","zipCode","target","value","isValid","test","validateZipCode","length","maxLength","onClick","fetch","then","response","json","main","toFixed","weather","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0QA2BeA,MAvBf,SAAqBC,GAAQ,IAAD,EACoBA,EAAMC,KAA5CC,EADkB,EAClBA,KAAMC,EADY,EACZA,SAAUC,EADE,EACFA,YAAaC,EADX,EACWA,KACrC,OACE,kBAAC,WAAD,KACE,4BAAKD,GACL,6BAASE,UAAU,qBACjB,yBAAKA,UAAU,sBACb,oCACA,2BAAID,IAEN,yBAAKC,UAAU,sBACb,2CACA,2BAAIJ,EAAJ,IAAU,0BAAMI,UAAU,kBAA1B,OAEF,yBAAKA,UAAU,sBACb,wCACA,2BAAIH,EAAJ,SCwDKI,MAxEf,WACE,IAAMC,EAAU,mCADW,EAEUC,mBAAS,IAFnB,mBAErBC,EAFqB,KAERC,EAFQ,OAGUF,mBAAS,CAC5CP,KAAM,KACNC,SAAU,KACVC,YAAa,KACbC,KAAM,OAPmB,mBAGrBO,EAHqB,KAGRC,EAHQ,OASiBJ,oBAAS,GAT1B,mBASpBK,EAToB,KASJC,EATI,KAgD3B,OAEE,6BAAST,UAAU,qBACjB,4BAAQA,UAAU,kBAChB,8DACE,6BACE,2BAAOU,YAAY,mDAAmDV,UAAU,eAAeW,SA3CzG,SAA2BC,GACzB,IAAIC,EAAUD,EAAME,OAAOC,MACvBC,EAUN,SAAyBH,GAEvB,MADY,qBACCI,KAAKJ,GAZJK,CAAgBL,GAC9BR,EAAeQ,GACXG,GAAuB,KAAZH,GAAqC,IAAnBG,EAAQG,OACvCV,GAAkB,GAElBA,GAAkB,IAoCgHW,UAAU,MACtI,4BAAQC,QA3BlB,WACOb,GAAkC,KAAhBJ,EAIvBkB,MAAM,uDAAD,OAAwDlB,EAAxD,qBAAgFF,IACpFqB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA5B,GAAI,OAAIY,EAAe,CAC3BX,MAQsBA,EARCD,EAAK+B,KAAK9B,MAS3BA,EAAO,QAAQ+B,QAAQ,IAR7B9B,SAAUF,EAAK+B,KAAK7B,SACpBC,YAAaH,EAAKiC,QAAQ,GAAGF,KAC7B3B,KAAMJ,EAAKkC,OAKf,IAA0BjC,KAdtBa,GAAkB,IAyBqBT,UAAU,kBAA3C,YAGN,uBAAGA,UAAU,SAASQ,EAAiB,GAAK,oBAC5C,6BAASR,UAAU,gBACK,OAArBM,EAAYV,KACX,sDAA2B,uBAAGI,UAAU,kBAAb,YAA3B,KACE,kBAAC,EAAD,CAAaL,KAAMW,OCtDhBwB,MARf,WACE,OACE,6BAAS9B,UAAU,iBACjB,kBAAC,EAAD,QCKc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.a94774e0.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport '../styles/Weather.css';\r\n\r\n\r\nfunction WeatherInfo(props) {\r\n  const { temp, humidity, description, city } = props.data;\r\n  return (\r\n    <Fragment>\r\n      <h3>{description}</h3>\r\n      <section className=\"weather-data-flex\">\r\n        <div className=\"header-description\">\r\n          <h4>City</h4>\r\n          <p>{city}</p>\r\n        </div>\r\n        <div className=\"header-description\">\r\n          <h4>Temperature</h4>\r\n          <p>{temp} <span className=\"degree-symbol\"></span> C</p>\r\n        </div>\r\n        <div className=\"header-description\">\r\n          <h4>Humidity</h4>\r\n          <p>{humidity}%</p>\r\n          </div>\r\n      </section>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WeatherInfo;\r\n","import React, { useState } from 'react';\r\nimport '../styles/Weather.css';\r\nimport WeatherInfo from './WeatherInfo';\r\n\r\nfunction WeatherContainer () {\r\n  const API_KEY = \"f10f34f852f30680ec00f79a24c61334\";\r\n  const[searchQuery, setSearchQuery] = useState('');\r\n  const[weatherData, setWeatherData] = useState({\r\n    temp: null,\r\n    humidity: null,\r\n    description: null,\r\n    city: null,\r\n  });\r\n  const [isValidZipCode, setIsValidZipCode] = useState(true);\r\n\r\n  function updateSearchQuery(event){\r\n    let zipCode = event.target.value;\r\n    let isValid = validateZipCode(zipCode);\r\n    setSearchQuery(zipCode);\r\n    if (isValid || zipCode === '' || isValid.length === 6) {\r\n      setIsValidZipCode(true);\r\n    } else {\r\n      setIsValidZipCode(false);\r\n    }\r\n\r\n  }\r\n\r\n  function validateZipCode(zipCode) {\r\n    let regex = /[0-9]{3}\\s[0-9]{2}/;\r\n    return regex.test(zipCode);\r\n  }\r\n\r\n  function getWeatherData() {\r\n    if (!isValidZipCode || searchQuery === '') {\r\n      setIsValidZipCode(false);\r\n      return;\r\n    }\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${searchQuery},sk&appid=${API_KEY}`)\r\n    .then(response => response.json())\r\n    .then(data => setWeatherData({\r\n      temp: convertToCelsius(data.main.temp),\r\n      humidity: data.main.humidity,\r\n      description: data.weather[0].main,\r\n      city: data.name\r\n    }));\r\n  }\r\n\r\n\r\n  function convertToCelsius(temp) {\r\n    return (temp - 273.15).toFixed(0);\r\n  }\r\n\r\n  return(\r\n\r\n    <section className=\"weather-container\">\r\n      <header className=\"weather-header\">\r\n        <h3> Slovakia Weather by ZIP Code </h3>\r\n          <div>\r\n            <input placeholder=\"Zip code eg. 851 01 (must include space to work)\" className=\"search-input\" onChange={updateSearchQuery} maxLength='6'/>\r\n            <button onClick={getWeatherData} className=\"material-icons\">search</button>\r\n          </div>\r\n      </header>\r\n      <p className=\"error\">{isValidZipCode ? '' : 'Invalid Zip Code'}</p>\r\n      <section className=\"weather-info\">\r\n        {weatherData.temp === null ? (\r\n          <p> No weather to display. <i className=\"material-icons\">wb_sunny</i> </p>\r\n        ) : <WeatherInfo data={weatherData} />\r\n      }\r\n      </section>\r\n    </section>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default WeatherContainer;\r\n","import React from 'react';\nimport '../styles/App.css';\nimport WeatherContainer from './WeatherContainer';\n\nfunction App() {\n  return (\n    <section className=\"app-container\">\n      <WeatherContainer />\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}